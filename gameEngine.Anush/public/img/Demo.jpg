| Original => Sub| 
|----------------|
Go => Featureforward
'go' => 'forward' "In the featureVel class"
dir => orientation
speed => spd
entity => item
deltaTime => TimeDifference
Trait => Feature
vel => velocity
Jump => Featurejump ("in the Featurejump class")
start() => begin()("in the Featurejump class and the tSet class")
this.duration => this.period
this.engageTime => this.timePeriod
this.velocity => this.vel
Velocity => featureVel("featureVelocity Class")
entity.vel.x => item.velocity.x("("featureVelocity Class"))
Compositor => OrderedLayers
context => ctx
draw => build("only draw as whole except the one in the createPixelLayer keep it as draw(ctx))
tile => brick
tiles => bricks
class Matrix => class Grid 
grid => cell
r => drw
image => img
match => intersection
matches => intersections
pos => position
Entity =>Entity
traits => features
Vec2 => Vector
KeyboardState => KeyboardKeys
keyStates => keyModes
addMapping => Matching
handleEvent => controlEvent
callback => confirm
listenTo => respondTo
eventName => codeNumber
keyState => keyMode
class tileCollider =>class Collision
class tileResolver =>class BrickConverter
createBackgroundLayer => createbgLayer
sprites => pixels
buffer => supplier
drawTile => buildBrick
drawBackgroundLayer => drawBgLayer
createSpriteLayer => createPixelLayer
createCollisionLayer => CollisionDetectionLayer
createSpriteLayer => createPixelLayer
resolvedTiles => convertedBricks
tileResolver => brickConverter
drawCollision => detectCollision
getByIndex => coordinatesMet
class Level => class Level
comp => orl
entities => Entity
checkX => XaxisCollision
checkY => YaxisCollision
loadImage => uploadImage
define => locate
defineTile => locateBrick
createTiles => buildBricks
backgrounds => Levelbck ("Read from the Json file")
ranges => dimensions ("Read from the Json file")
loadLevel => drawLevel
loadBackgroundSprites() => drawBackgroundPixels()
levelSpec => levelDetails
backgroundSprites => pixels
createMario => drawPlayerPixels
loadLevel => drawLevel
sprite => playerPixel
mario => player
class Timer =>class timeSet
time => tSet
input => kPressed
value => intersectV ("in class Grid")
loadMarioSprite => drawPlayerPixels
sprites => pixels
class SpriteSheet => class DrawingPixel
toIndex => Brickcoordintes
toIndexRange => DistanceMatched
pos1 => positionA
pos2 => positionB
getByIndex => coordinatesMet
searchByPosition => coordinatesPos
searchByRange => coordinatesDistance
indexX => coordinateX
indexY => coordinateY
accumulatedTime => buildUptime
updateProxy => updateAttorny
"Note that I did not make the input class since we can easly add Keyboard Events")
